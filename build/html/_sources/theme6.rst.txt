.. _theme6:
   
=========================================
NumPy массивы и их свойства
=========================================

`Лекция в .ipynb формате <../../source/lectures/theme6.ipynb>`_

Numpy
=====

Согласно разделу документации `NumPy: the absolute basics for beginners <https://numpy.org/doc/stable/user/absolute_beginners.html>`_,
библиотека NumPy (Numerical Python) де факто стала абсолютным стандартом
для всех что работает с любыми вычислениями в Python. Использование
NumPy для вычислений позволяет ускорить их в десятки (а иногда и в
сотни) раз, по сравнению с обычным Python, и иногда даже приблизиться к
скорости выполнения вычислений на C++.

NumPy не является стандартной библиотекой Python, поэтому, чтобы ее
использовать, необходимо ее сначала установить. Если же вы используете Anaconda,
то NumPy у вас уже есть.

Для использования NumPy достаточно импортировать:

.. code:: python

    import numpy

Чаще, ее импортируют как ``np``

.. code:: python

    import numpy as np

Дальнейшее ее использование сводится к вызову одной из `тысяч внутренних
констант, объектов, функций и модулей <https://numpy.org/doc/stable/user/absolute_beginners.html>`_. . Например, генерация пяти случайных чисел выглядит следующим образом:

.. code:: python

    r = np.random.rand(5)    # 5 случайных чисел от 0 до 1
    print(r)


.. parsed-literal::

    [0.74684566 0.13886654 0.05409378 0.36626933 0.47326628]


Массивы NumPy
=============

Одним из базовых классов в NumPy являются массивы (``numpy.ndarray``,
`описание массивов и их методов <https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html>`_). Именно с этими объектами работают все функции и методы
связанные с обработкой данных. Обычный список может быть легко в него
преобразован:

.. code:: python

    a = list(range(10))
    b = np.array(a)
    print(a,'\t', type(a))
    print(b,'\t\t', type(b))


.. parsed-literal::

    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 	 <class 'list'>
    [0 1 2 3 4 5 6 7 8 9] 		 <class 'numpy.ndarray'>


При этом, класс ``numpy.ndarray`` является итерируемым, а значит поддерживает
обращение по индексу, взятие среза и прочее (по аналогии со списками):

.. code:: python

    print(a[2])
    print(b[2])
    print(a[2:5])
    print(b[2:5])
    print(a[2:-1:2])
    print(b[2:-1:2])


.. parsed-literal::
    2
    2
    [2, 3, 4]
    [2 3 4]
    [2, 4, 6, 8]
    [2 4 6 8]


Важной особенностью NumPy массивов является их гомогенность, т.е. все
элементы в них имеют один и тот же тип данных. Попытка создания массива с
элементами разного типа может привести к ошибке:

.. code:: python

    a = np.array([2, 2, 'a'])
    print(a[0] + a[1])
    print(type(a[0]))


.. parsed-literal::

    22
    <class 'numpy.str _'>


При создании массива можно указать какой именно тип данных необходимо
использовать. Такое может быть полезно при ресурсоемких вычислениях
(например с `Numba <https://numba.pydata.org/>`_), или при использовании `видеокарты <https://scikit-cuda.readthedocs.io/en/latest/>`_, мендеджменте
памяти и т.д.

.. code:: python

    a = np.array([1, 2, 3, 4], dtype=np.int64)
    b = np.array([1, 2, 3, 4], dtype=np.float64)
    c = np.array([1, 2, 3, 4], dtype=np.complex)
    print(a)
    print(b)
    print(c)


.. parsed-literal::

    [1 2 3 4]
    [1. 2. 3. 4.]
    [1.+0.j 2.+0.j 3.+0.j 4.+0.j]


Базовые методы масивов NumPy
----------------------------

Одним из очевидных приемуществ массивов NumPy перед списком -
векторизованные арифметические и математические опреации. Это означает
что первый элемент первого массива будет складываться (вычитаться, умножаться
или любая другая операция) с первым элементов второго массива, второй со вторым и т.д.:

.. code:: python

    a = np.arange(0, 10, 2)
    b = np.arange(0, 5, 1)
    print(a)
    print(b)
    print(a*b)
    print(b**2)
    print(np.exp(b))


.. parsed-literal::

    [0 2 4 6 8]
    [0 1 2 3 4]
    [ 0  2  8 18 32]
    [ 0  1  4  9 16]
    [ 1.          2.71828183  7.3890561  20.08553692 54.59815003]


Это работает и с массивами более высоких размерностей (вложенных массивов).
Двумерные массивы также складываются поэлементно:    

.. code:: python

    a = [[1, 2],
         [3, 4]]
    
    b = [[5, 6],
         [7, 8]]
    
    a = np.array(a)
    b = np.array(b)
    print(a + b)


.. parsed-literal::

    [[ 6  8]
     [10 12]]


В класс массивов NumPy встроена также возможность транспонирования, и
ряд других удобных методов

.. code:: python

    print(a)
    print(a.T)
    print(a.T)           #транспонирование
    print(list(a.flat))  #"вытягивание" массива до одномерного
    print(a.size)        #количество элементов в массиве
    print(a.ndim)        #количество размерностей (осей) массива
    print(a.shape)       #форма массива, т.е. количество элементов по каждой из осей


.. parsed-literal::

    [[1 2]
     [3 4]]
    [[1 3]
     [2 4]]
    [1, 2, 3, 4]
    4
    2
    (2, 2)


В массивах имеется поддержка комплесных чисел

.. code:: python

    a = np.array(a, dtype = complex)
    print(a)
    a *= 1+1j
    print(a)
    print(a.real)


.. parsed-literal::

    [[1.+0.j 2.+0.j]
     [3.+0.j 4.+0.j]]
    [[1.+1.j 2.+2.j]
     [3.+3.j 4.+4.j]]
    [[1. 2.]
     [3. 4.]]


Оси и форма массивов
--------------------

Иногда необходимо переформатировать массив, или вывести только элементы
из определенной колонки. Для этого существуют связанные методы: оси
(``axis`` в документации и форма ``shape``, ``reshape()``, etc).

Распределение и нумерация осей выглядит довольно простым образом:

.. image:: figs/axis.jpg

.. code:: python

    a = [[3, 6, 5],
         [0, 2, 1],
         [7, 2, 9]]
    
    b = np.array(a)
    b.sort(axis=0) # сортируем все колонки
    print(b)
    
    b = np.array(a)
    b.sort(axis=1) # сортируем все строки
    print(b)


.. parsed-literal::

    [[0 2 1]
     [3 2 5]
     [7 6 9]]
    [[3 5 6]
     [0 1 2]
     [2 7 9]]


``shape`` массива отобркжает его размеры по осям

.. code:: python

    a = [[3, 6, 5],
         [0, 2, 1]]
    
    b = np.array(a)
    print(b.shape)


.. parsed-literal::

    (2, 3)


При необоходимости форму можно легко поменять:

.. code:: python

    a = [[3, 6, 5, 9],
         [0, 2, 1, 4]]
    
    b = np.array(a)
    print(b.reshape(8), end = '\n\n')
    print(b.reshape(8,1), end = '\n\n')
    print(b.reshape(4,2), end = '\n\n')
    print(b.reshape(2,2,2), end = '\n\n')
    print(b.reshape(2,2,2).ndim)


.. parsed-literal::

    [3 6 5 9 0 2 1 4]
    
    [[3]
     [6]
     [5]
     [9]
     [0]
     [2]
     [1]
     [4]]
    
    [[3 6]
     [5 9]
     [0 2]
     [1 4]]
    
    [[[3 6]
      [5 9]]
    
     [[0 2]
      [1 4]]]
    
    3


Создание шаблонных массивов NumPy
---------------------------------

NumPy поддерживает несколько вариантов создания массивов по шаблону. Мы
рассмотрим три наиболее частоупотребимых из них:

``np.ones(shape, [dtype=...])`` - создание массива из единиц формы shape

``np.zeros(shape, [dtype=...])`` - создание массива из нулей формы shape

``np.full(shape, value, [dtype=...])`` - создание массива из ``value``
формы shape

.. code:: python

    print(np.ones((2,4)))
    print(np.ones(shape=(2,4)))
    print(np.zeros(7))
    print(np.full((3,2), np.pi))


.. parsed-literal::

    [[1. 1. 1. 1.]
     [1. 1. 1. 1.]]
    [0. 0. 0. 0. 0. 0. 0.]
    [[3.14159265 3.14159265]
     [3.14159265 3.14159265]
     [3.14159265 3.14159265]]


Помимо этого NumPy поддерживает несколько функций, позволяющих
генерировать ряды чисел:

``np.arange(start, stop, step)`` - аналог ``range()``, возвращает
``ndarray`` поддерживает не целые числа

``np.linspace(start, stop, num=50)`` - создает массив длиной ``num``, от
``start`` до ``stop`` (удобно для графиков)

.. code:: python

    print(np.linspace(0, 1, 11))
    print(np.arange(0, -1, -0.3))


.. parsed-literal::

    [0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1. ]
    [ 0.  -0.3 -0.6 -0.9]


Модуль ``numpy.random`` содержит большое количество различных функций
для генерации случайных чисел. В `документации <https://numpy.org/doc/stable/reference/random/legacy.html>`_ описанны обширные
возможности данного модуля.

Метод ``copy``
--------------

В некоторых случаях у вас может появиться необходимость продублировать
массив. При простом присваивание может образоваться следующая ситуация:

.. code:: python

    a = np.arange(-5, 6, 2)
    print(a)
    b = a
    a[0] += 10
    print(b)


.. parsed-literal::

    [-5 -3 -1  1  3  5]
    [ 5 -3 -1  1  3  5]


В этом случае, передается не сам объект а ссылка на него. Для того чтобы
копия не менялась при копировании исходника, можно использовать метод
``np.copy()``.

.. code:: python

    a = np.arange(-5, 6, 2)
    b = np.copy(a)
    a[0] += 10
    print(b)


.. parsed-literal::

    [-5 -3 -1  1  3  5]


NumPy работа с файлами
----------------------

Для работы с текстовыми файлами существуют методы ``numpy.fromstring``
(преобразовывает заданную строку в массив) и ``numpy.loadtxt``
(импортирует числовые данные из текстовых файлов).

Рассмотрим пример использования
``numpy.fromstring(строка, sep='разделитель')``:

.. code:: python

    print(np.fromstring('1, 4.5, -7856, 234', sep=','))


.. parsed-literal::

    [ 1.000e+00  4.500e+00 -7.856e+03  2.340e+02]

 
функция::

    numpy.loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None)


(`описание <https://numpy.org/doc/stable/reference/generated/numpy.loadtxt.html>`_).

Откроем обычным методом файл ``t6_s1.csv``:

.. code:: python

    with open('t6_s1.csv', 'r') as f:
        for line in f: print(line, end='')


.. parsed-literal::

    x, y
    1, 4
    2, 6.7
    3, 8.999
    4, 11.324


Видим, что первая строка не конвертируется в ``float`` и простое
обращение ``np.loadtxt('t6_s1.csv')`` вызовет ошибку. Необходимо указать
``delimiter=', '``, ``skiprows=1``.

.. code:: python

    print(np.loadtxt('t6_s1.csv', delimiter=', ',skiprows=1))


.. parsed-literal::

    [[ 1.     4.   ]
     [ 2.     6.7  ]
     [ 3.     8.999]
     [ 4.    11.324]]


Может быть так же `полезно ознакомиться <https://numpy.org/doc/stable/reference/generated/numpy.savetxt.html#numpy.savetxt>`_ с возможностями функции
``numpy.savetxt``.

В некоторых случаях бывает удобно сохранять массивы numpy на диск в
бинарном виде. Для этого удобно использовать функции ``np.save`` и
``np.load``.



Линейная алгебра и SciPy.linalg
===============================

Библиотека NumPy содержит модуль линейной алгебры ``numpy.linalg``. Этот
модуль содержит простые базовые операции, такие как векторное умножение,
перемножение матриц, простой поиск собственных чисел и значений матриц,
детерминант и др. (`см. документацию <https://numpy.org/doc/stable/reference/routines.linalg.html>`_). Его функционал не полон, и иногда
может быть полезно использовать дополнительно модуль ``scipy.linalg``
(`документация модуля <https://docs.scipy.org/doc/scipy/reference/linalg.html#module-scipy.linalg>`_).

Рассмотрим простые примеры использования модулей линейной алгебры.

Поиск собственных векторов и собственных значений матриц: :math:`\{A\}\cdot\vec{v}-\lambda\vec{v} =0`

.. code:: python

    a = np.arange(1, 10).reshape((3, 3))
    print(a) # исходная матрица
    vals, vects=np.linalg.eig(a)
    print(vals)
    print(vects)
    print(np.matmul(a, vects[:,0]) - vals[0] * vects[:,0])


.. parsed-literal::

    [[1 2 3]
     [4 5 6]
     [7 8 9]]
    [ 1.61168440e+01 -1.11684397e+00 -9.75918483e-16]
    [[-0.23197069 -0.78583024  0.40824829]
     [-0.52532209 -0.08675134 -0.81649658]
     [-0.8186735   0.61232756  0.40824829]]
    [ 3.55271368e-15  0.00000000e+00 -1.77635684e-15]


поиск обратной матрицы:

.. code:: python

    from scipy.linalg import inv
    a = [[1, 3, 3],
         [0,-5, 6],
         [7, 8, 9]]
    b = inv(a)
    print(np.dot(a,b))


.. parsed-literal::

    [[ 1.00000000e+00 -1.38777878e-17  0.00000000e+00]
     [-3.33066907e-16  1.00000000e+00  2.77555756e-17]
     [ 6.10622664e-16  1.24900090e-16  1.00000000e+00]]

Задачи
======

#. Ознакомьтесь с `документацией модуля  <https://numpy.org/doc/stable/reference/random/legacy.html>`_ ``numpy.random``. Выбирете под каждый пункт наиболее подходящий метод и выполните в одну строку:

    сгенерируйте случайное число от 0 до 1
    
    сгенерируйте одномерный массив длинной N, заполненый случайными числами

    из предложенного массива выбирите случайную последовательность длинной ``N``   

#. Используя ``numpy.arange`` сгенерируйте массив с элементами от 1 до 9. Методом ``reshape`` преобразуйте его в массив: 

    с двумя строками
    
    с двумя столбцами
    
    в матрицу :math:`3\times3`
    
#. С помощью метода ``np.mgrid`` сгенерируйте массив:

    .. code:: python
    
        [[ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90],
         [ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90],
         [ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90],
         [ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90],
         [ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90],
         [ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90],
         [ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90],
         [ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90],
         [ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90],
         [ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90]]
    
    Из полученного массива выведите
    
    только 4 колонку ``[30, 30, .., 30]``
    
    квадратную матрицу с элементами от 10 до 60
    
    прямоугольную матрицу с 5 последними строками от 10 до 80 (для уверенности присвойте элементу ``a[-1][1]=11``)
    
#.  Одним из простейших методов для обработки данных является метод главных компонент (principal component analysis, PCA). Данный метод позволяет выявить скрытые линейные зависимости в данных, что может помочь с разделением пересекающихся спектров, обработкой изображений и многое другое.

    Суть метода заключается в нахождении собственных векторов и собственных чисел матрицы ковариации отдельных признаков. При этом, собственные вектора задают направления (комбинации исходных признаков) для наиболее полного ортогонального разложения признаков, а соответствующие собственные значения отображают насколько часто в представленных данных встречается такая комбинация.

    Представим, что у вас есть набор точек, отображающий смещение атома по плоскости в результате диффузии. Вы знаете, что движение в такой среде анизотропно, однако не знаете как лучше задать выделенные направления. Проведя анализ главных компоент такого набора, вы получите два собственных ветора и соответствующих им собственных числа (задача то двумерная). В этом случае, напралвние собственных векторов будет определять основные оси диффузии, а собственные значения - коэффициенты диффузии. 

    Проведите анализ главных компонент для набора точек, представленны в файле `t5_diff.csv <../../source/lectures/t5_diff.csv>`_. Для этого, постройте матрицу ковариации с помощью функции ``numpy.cov`` и найдите ее собственные вектора и собственные значения с помощью ``numpy.linalg.eig`` (будте внимательны с осями, при работе с собственными векторами). Получите тот же результат с помощью ``sklearn.decomposition.PCA`` (`см. примеры в документации <https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html>`_).
