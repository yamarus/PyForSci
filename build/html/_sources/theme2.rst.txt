.. _theme2:
  
=========================================
Основы Синтаксиса Python
=========================================
Подробное описание спецификаций языка Python можно найти на `официальном сайте <https://www.python.org/doc/>`_. Помимо этого существует множество стороних (в том числе рускоязычных) ресурсов, где основы языка описаны более понятно для читателя с малым опытом программирования. 
 
`Лекция в .ipynb формате <../../source/lectures/theme2.ipynb>`_

Форматирование блоков кода
==========================
В python достаточно удобная система разметки кода. Один и тот же уровень вложения имеет один и тот же отступ (табуляция или 4 пробела), и не требует никакого дополнительного форматирования (как ``{ ... }`` в **С/C++** и схожих по синтаксису языках или ``begin ... end`` в **Pascal** и т.д.). 

Пример кода на **C**:

.. code:: C

    #include <stdio.h>
    int main(void) {
        int i, n,  nextTerm;
        Int t1 = 0, t2 = 1;
        printf("Enter the number of terms: ");
        scanf("%d", &n);
        printf("Fibonacci Series: ");
    
        for (i = 1; i <= n; ++i) {
            printf("%d, ", t1);
            nextTerm = t1 + t2;
            t1 = t2;
            t2 = nextTerm;
        }
        return 0;
    }


Тот же код на **Python**:


.. code:: python

    t1=0 
    t2=1  
    n=int(input("Enter the number of terms:"))
    print( "Fibonacci Series: ")
    for x in range(1, n):
        print(t1, end = " ")
        nextTerm = t1 + t2                           
        t1 = t2
        t2 = nextTerm

.. warning:: Если вы используете кириллицу в своем скрипте, он должен начинатся со строки::

    # -*- coding: utf-8 -*-

Динамическая типизация
======================

В Python не нужно явно задавать тип переменой, его можно изменять по ходу выполнения
программы


.. code::python

    a = 3            # целочисленное значение
    a = a + 0.2      # значение с плавающей запятой
    a = a + 0.5j     # комплексное значение
    a = str(a)       # строка
    print(type(a))
    print(a)


.. parsed-literal::

    <class 'str'>
    (3.2+0.5j)



Ввод и вывод в консоль
======================
Есть два основных способа работы с Python: работа в консоли или написание исполняемых скриптов. В первом случае, достаточно просто последовательно вводить команды в консоль. Такой способ подходит использования python в режиме калькулятора без графического интерфейса, или для выполнения нескольких простых последовательных комманд. В данном случае вопрос ввода и вывода данных решается сам собой.  В остальных случаях целесообразние использование :file:`.py` скриптов или :file:`.ipynb` файлов. 


В коносли и в jupyter notebook ввод и вывод делается сам собой.


.. code:: python

    a = [1, 2, 3]

Далее просто вводим имя переменной


.. code:: python

    a

получаем результат:

.. parsed-literal::

    [1, 2, 3]

В скриптах используются функции ``print()`` и ``input()``


.. code:: python

    a = 1.23e-2
    print(a)


.. parsed-literal::

    0.0123


.. code:: python

    print('текст')


.. parsed-literal::

    текст




.. code:: python

    var = input()               # ожидаем ввод с клавиатуры
    print('вы ввели: ' + var)


.. parsed-literal::

    765
    вы ввели: 765


Ключевые слова и встроенные функции в Python
=============================================
Дабы избежать конфликта имен и познакомиться с некоторыми стандартными функциями pyhton, полезно просмотреть стандартные ключевые слова и встроенные функции.

* Список `ключевых слов <https://pythonworld.ru/osnovy/klyuchevye-slova-modul-keyword.html>`_
* Список `встроенных функций <https://pythonworld.ru/osnovy/vstroennye-funkcii.html>`_



Основные операторы и типы данных
================================
В данной теме мы рассмотрим минимальный набор операторов и типов данных. На следующих занятиях эти вопросы будут рассмотренны более подробно.


К основным типам данных можно отнести: логические (bool), числовые (int, float, complex), списки (list), кортежи (tuple), словари (dict), множества (set) и строки (str). Создание переменной любого типа выглядит следующим образом:

.. code:: python

    имя_переменной = данные

Логические переменные
---------------------

Логические переменные могут принимать значения ``True`` или ``False``.
Используются в условных операторах.

.. code:: python

    b = True              
    a = False
    
    if b:
        print(type(b))
        print('a =',a)


.. parsed-literal::

    <class 'bool'>
    a = False


Числовые переменные
-------------------

К стандартным числовым типам относятся целочисленные (int), числа с
плавающей точкой (float) и комплексные числа (complex).

.. code:: python

    i = 42                # целые
    f1 = 4.2e1            # числа с плавающей точкой
    f2 = 0.42
    c = 4.2 - 0.1j        # комплексные числа
    
    print('целое число\t\t\t', type(i), i)
    print('число с плавающей запятой\t', type(f2), f2)
    print('комплесное число\t\t', type(c), c)


.. parsed-literal::

    целое число			 <class 'int'> 42
    число с плавающей запятой	 <class 'float'> 0.42
    комплесное число		 <class 'complex'> (4.2-0.1j)


.. code:: python

    print('\nПереводим числа:', f1**2.1, int(f1**2.1), float('1.25e-3'))


.. parsed-literal::

    
    Переводим числа: 2563.4420839379213 2563 0.00125


Списки и кортежи
----------------

Списки (аналог массивов) - один из наиболее часто используемых типов.
Обозначаются ``[элемент1, элемент2, .. элементN]``. В качестве элементов
могут выступать любые типы данных, включая другие списки. Элементы
одного списка могут быть разного типа.

.. code:: python

    l = [1, 2, 3, 4]
    l = [[3, 'строка', i],
         [1, -13.3+2j, 4],
         [f2, 1.47e-7, 2],
         'элемент списка']
    l = list('делаем список из строки')
    
    print(type(l), len(l))
    print(l)


.. parsed-literal::

    <class 'list'> 23
    ['д', 'е', 'л', 'а', 'е', 'м', ' ', 'с', 'п', 'и', 'с', 'о', 'к', ' ', 'и', 'з', ' ', 'с', 'т', 'р', 'о', 'к', 'и']


Кортежи - то же что и списки, только их нельзя изменить после создания

.. code:: python

    t = (1, 2, -2.7)
    
    print(type(t), t)


.. parsed-literal::

    <class 'tuple'> (1, 2, -2.7)


Словари и множества
-------------------

Словарь - набор элементов ``ключ: значение``. Простейший пример создания и
использования:

.. code:: python

    d = {'ключ':'значение', 'C':12.01, 'N':14.01}
    
    print(d['C'])
    print(type(d), d)


.. parsed-literal::

    12.01
    <class 'dict'> {'ключ': 'значение', 'C': 12.01, 'N': 14.01}


Множества - набор не повторяющихся элементов

.. code:: python

    s = {'o', 'l', 4}
    s = set('А какие тут есть уникальные символы?')
    
    print(type(s), s)


.. parsed-literal::

    <class 'set'> {'ь', 'к', 'с', 'ы', 'в', 'о', 'м', 'А', 'н', 'л', 'т', '?', ' ', 'а', 'е', 'у', 'и'}


Строки
------

.. code:: python

    s = 'просто строка'
    s = '2.5 попугая'
    s = str(1.6e-19)
    
    print(type(s), s)


.. parsed-literal::

    <class 'str'> 1.6e-19


Операторы сравнения
-------------------

К операторам сравнения можно отнести 

``==``, ``!=`` - проверка равенства
и неравенства, соответственно; 

``<`` и ``>`` - проверка условий больше,
меньше; 

``<=`` и ``>=`` - проверка условий больше или равно и меньше или
равно. 

Каждый из операторов сравнения возвращает ``True`` или ``False``

.. code:: python

    print(3 > 5)
    print(type(1. != 2))
    
    is_true = 300.0e-2 == 3
    
    print(is_true)


.. parsed-literal::

    False
    <class 'bool'>
    True


Условные операторы
------------------

Условные операторы выполняют проверку тех или иных условий. В python
имется 3 стандартных условных конструкций:

**простое условие на выполение инструкций**

.. code:: python

    if условие:
        инструкция
        инструкция

например: если a>0, то пишем что число положительное

.. code:: python

    if a > 0:
        print('число положительное')

тоже самое: присваиваем переменной condition логическое значение

.. code:: python

    condition = a > 0

в случае лишь одной инструкции после if, elif или else инструкцию можно
записать сразу после условия

.. code:: python

    if condition: print('число положительное')

**условие с одной альтернативой**

.. code:: python

    if условие:
        инструкция
        инструкция
    else:
        инструкция
        инструкция

например, если a >= b, то вычитаем из a единичку, иначе прибавляем к a
единичку

.. code:: python

    if a>=b:
        a -= 1    # или a = a - 1
    else:
        a += 1    # или a = a + 1

**условия с множественным выбором**

.. code:: python

    if условие_1:
        инструкция
        инструкция
    elif условие_2:
        инструкция
        инструкция
        #.......
    elif условие_n:
        инструкция
        инструкция
    else:
        инструкция
        инструкция

например, проверяем тип атома и присваиваем соответствующую массу

.. code:: python

    m = 0
    if atom == 'C':     m = 12.
    elif atom == 'H':   m = 1.
    elif atom == 'O':   m = 16.
    else:
        print('такого атома не знаю')

Цикл while
----------

Цикл ``while`` выполняется до тех пор, пока условие в нем верно

.. code:: python

    while условие:
        делаем какие-то действия 1
        делаем какие-то действия 2
        ...

выводим пока i < 10

.. code:: python

    i = 0
    while i < 10:
        print('a' + str(i))
        i += 2


.. parsed-literal::

    a0
    a2
    a4
    a6
    a8


Цикл for и функция range
------------------------

Цикл ``for`` выполняет инструкции, последовательно итерируя набор.
Пример итерации по некоторому списку:

.. code:: python

    for element in some_list:
        набор 
        инструкций

Выводим число, и его квадрат

.. code:: python

    for i in [1, 7, 2.3, 0]: print(i,'\t', i**2)


.. parsed-literal::

    1 	 1
    7 	 49
    2.3  5.289999999999999
    0 	 0


Цикл ``for`` может выводить значения любого итерируемого объекта, будь
то список, кортеж, словарь (по ключам), множества, строки и т.д.:

.. code:: python

    for s in 'Яблоко':
        if s == 'Я':
            print('R', end = '')
        else:
            print(s, end = '')


.. parsed-literal::

    Rблоко

Для удобства итераций по последовательному ряду числе можно использовать
функцию ``range(начало, конец, шаг)``.

Функция ``range()`` в качестве аргументов принимает только целочисленные
значения.

Выводим числа от 0 до 9:

.. code:: python

    for i in range(10): print(i, end = ', ')


.. parsed-literal::

    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 

Выводим значения от 10 до 19

.. code:: python

    for i in range(10, 20): print(i, end = ', ')


.. parsed-literal::

    10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 

Выводим значения от -9 до 18 с шагом 3 (т.е. -9, -6, ..., 18)

.. code:: python

    for i in range(-9, 20, 3): print(i, end = ', ')


.. parsed-literal::

    -9, -6, -3, 0, 3, 6, 9, 12, 15, 18, 

Выводим значения от 20 до 12 с шагом 2 (т.е. 20, 18, ..., 12)

.. code:: python

    for i in range(20, 10, -2): print(i, end = ', ')


.. parsed-literal::

    20, 18, 16, 14, 12, 

Функцией ``range()`` можно генерировать списки:

.. code:: python

    print(range(10))
    print(list(range(10)))


.. parsed-literal::

    range(0, 10)
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Задачи
======


#. Что выведет команда ``print(b)``, если ``b`` задается следующим образом:

    * 
        ::

            b = 1 > 2
    
    *
        ::  
    
            b = 3 == 0.03e2

    
    *
        ::  
    
            b = 1 > 2 and 3 <= 3
    
    *
        ::  
    
            b = 1 > 2 or  3 <= 3

    
    *
        ::  
    
            b = not('a' != 'A')

    *
        ::  
    
            c = 3.1
            b = type(c) is float

    *
        ::  
    
            some_list = ['a', 3., [1, 7], 42j]
            b = 'a' in some_list
            b = 1 in some_list

#. Напишите программу, суммирующую два числа из ввода ``input()``.

#. Найдите уравнение прямой, проходящей через две заданные точки (задается через ``input()``).

#. Найдите корни квадратного уравнения вида :math:`a x^2+b x+c = 0`, где коэффициенты задаются по отдельности через ``input()``. В случае получения комплексных корней, выводите предупреждение об отсутствии действительных корней.

    .. hint:: используйте проверку по типу переменной (``if type(D) is complex: ...``)
 
#. Используя циклы ``for`` и ``while``, двумя разными способами рассчитайте сумму ряда :math:`\frac{1}{n}`, где :math:`n` изменяется от :math:`N_0` до :math:`N`.

#. Определите общее количество символов, количество символов за исключением знаков препинания (,.!?;:) и пробелов и количество уникальных символов в введенной строке.

    .. hint:: используйте тип ``set`` (множества), команду ``len()`` и проверку наличия элемента ``if s in reference_list: ...``.
        
#. Напишите программу, которая переводит введеное число с одного типа десятичного разделителя на другой. Например ``6.34 -> 6,34`` и наоборот.


